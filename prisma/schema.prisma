// Each user can have one budget, multiple transactions and accounts

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl      = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  clerkUserId   String    @unique // clerk user id
  email         String    @unique
  name          String?
  imageUrl      String?
  transactions  Transaction[]
  accounts      Account[]
  budgets       Budget[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("users") //database name for the table
}

model Account {
  id           String        @id @default(uuid())
  name         String
  type         AccountType  //enum (Only some value allowed)
  balance      Decimal       @default(0) // will ask inital balance while creating an account
  isDefault    Boolean       @default(false) //only one account can be default account
  userId       String //foreign key for user table
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade) // field userid refrences id inside user table, ondelette cascase( means on user  delete delete all accoutns)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([userId]) //in db index will be created for user id, (WHen search account with user id it will be faster)
  @@map("accounts") 
}

enum AccountType {
  CURRENT
  SAVINGS
}

model Transaction {
  id                String            @id @default(uuid())
  type             TransactionType
  amount           Decimal
  description      String? // ? => OPtional field
  date             DateTime
  category         String           
  receiptUrl       String?
  isRecurring      Boolean           @default(false)
  recurringInterval RecurringInterval? // Only used if isRecurring is true
  nextRecurringDate DateTime?         // Next date for recurring transaction
  lastProcessed    DateTime?         // Last time this recurring transaction was processed
  status           TransactionStatus  @default(COMPLETED)
  userId           String
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountId        String
  account          Account           @relation(fields: [accountId], references: [id], onDelete: Cascade)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@index([userId])
  @@index([accountId])
  @@map("transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum RecurringInterval {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  COMPLETED
}

enum TransactionStatus {
  PENDING
  FAILED
  COMPLETED
}

model Budget {
  id          String       @id @default(uuid())
  amount      Decimal
  lastAlertSent DateTime?  // Track when the last alert was sent
  userId      String       @unique
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([userId])
  @@map("budgets")
}
